import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";
import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { MapPin, Activity, Users } from "lucide-react";
import { motion } from "framer-motion";

// Navbar mejorado
function Navbar() {
  return (
    <nav className="w-full bg-blue-500 p-4 text-white flex justify-center shadow-lg">
      <Link
        className="mx-4 hover:text-blue-200 transition-colors duration-300"
        to="/"
      >
        Inicio
      </Link>
      <Link
        className="mx-4 hover:text-blue-200 transition-colors duration-300"
        to="/runsmart"
      >
        Nutrici√≥n
      </Link>
    </nav>
  );
}

// P√°gina de inicio
function Home() {
  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-6">
      <header className="w-full max-w-4xl text-center py-10 px-4">
        <h1 className="text-4xl md:text-5xl font-bold text-gray-800">
          RunSmart üèÉ‚Äç‚ôÇÔ∏è
        </h1>
        <p className="text-gray-600 mt-2 text-sm md:text-base">
          La plataforma todo en uno para corredores: entrenamiento, rutas,
          comunidad y m√°s.
        </p>
      </header>

      <section className="grid md:grid-cols-3 gap-6 w-full max-w-4xl">
        <FeatureCard
          icon={<Activity className="text-blue-500 w-12 h-12" />}
          title="Planes de Entrenamiento"
          description="Entrena con planes personalizados y ajustados a tu progreso."
        />
        <FeatureCard
          icon={<MapPin className="text-green-500 w-12 h-12" />}
          title="Rutas Seguras"
          description="Descubre caminos √≥ptimos seg√∫n iluminaci√≥n, tr√°fico y seguridad."
        />
        <FeatureCard
          icon={<Users className="text-red-500 w-12 h-12" />}
          title="Comunidad Running"
          description="Con√©ctate con otros corredores y participa en retos semanales."
        />
      </section>

      <Link to="/runsmart">
        <Button className="mt-8 px-6 py-3 text-lg font-semibold bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-300">
          Descubre m√°s üöÄ
        </Button>
      </Link>
    </div>
  );
}

// Tarjeta de caracter√≠sticas con animaci√≥n
function FeatureCard({ icon, title, description }) {
  return (
    <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
      <Card className="hover:shadow-xl transition-shadow duration-300">
        <CardContent className="flex flex-col items-center p-6">
          {icon}
          <h2 className="text-lg font-semibold mt-4">{title}</h2>
          <p className="text-sm text-gray-600 text-center mt-2">{description}</p>
        </CardContent>
      </Card>
    </motion.div>
  );
}

// P√°gina de nutrici√≥n mejorada
function RunSmart() {
  const [goal, setGoal] = useState("resistencia");
  const [weight, setWeight] = useState(70);
  const [calories, setCalories] = useState(0);

  const calculateCalories = () => {
    let baseCalories =
      weight * (goal === "resistencia" ? 30 : goal === "marat√≥n" ? 35 : 40);
    setCalories(baseCalories);
  };

  const recipes = [
    { name: "Ensalada de quinoa", calories: 400, type: "resistencia" },
    { name: "Batido proteico", calories: 250, type: "marat√≥n" },
    { name: "Pasta con pollo", calories: 600, type: "gana m√∫sculo" },
  ];

  return (
    <div className="p-6 max-w-3xl mx-auto bg-gradient-to-br from-blue-50 to-green-50 rounded-lg shadow-lg">
      <h1 className="text-2xl font-bold mb-4 text-gray-800">
        RunSmart - Nutrici√≥n para Corredores
      </h1>
      <select
        className="border rounded p-2 mb-4 w-full bg-white shadow-sm"
        value={goal}
        onChange={(e) => setGoal(e.target.value)}
      >
        <option value="resistencia">Resistencia</option>
        <option value="marat√≥n">Marat√≥n</option>
        <option value="gana m√∫sculo">Ganar M√∫sculo</option>
      </select>
      <div className="mb-4">
        <label className="block font-semibold text-gray-700">Peso (kg):</label>
        <Input
          type="number"
          value={weight}
          onChange={(e) => setWeight(Number(e.target.value))}
          className="border rounded p-2 w-full bg-white shadow-sm"
        />
        <Button
          className="mt-2 w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold"
          onClick={calculateCalories}
        >
          Calcular Calor√≠as
        </Button>
        {calories > 0 && (
          <p className="mt-2 text-gray-700">
            Requerimiento diario: <strong>{calories} kcal</strong>
          </p>
        )}
      </div>
      <div className="grid gap-4">
        {recipes
          .filter((recipe) => recipe.type === goal)
          .map((recipe, index) => (
            <motion.div
              key={index}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <Card className="p-4 border rounded bg-white shadow-sm hover:shadow-md transition-shadow duration-300">
                <CardContent>
                  <h2 className="text-lg font-semibold text-gray-800">
                    {recipe.name}
                  </h2>
                  <p className="text-sm text-gray-600">
                    Calor√≠as: {recipe.calories}
                  </p>
                </CardContent>
              </Card>
            </motion.div>
          ))}
      </div>
    </div>
  );
}

// Componente principal
export default function App() {
  return (
    <Router>
      <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/runsmart" element={<RunSmart />} />
      </Routes>
    </Router>
  );
}
